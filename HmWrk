#Task 1

#Robots.txt

#Download and save to file robots.txt from wikipedia, twitter websites etc. 

import requests

def download_robots_txt(url, save_path):
    # Make a GET request to the website's robots.txt URL
    response = requests.get(url + "/robots.txt")
    
    if response.status_code == 200:
        # Save the content to a file
        with open(save_path, 'w') as file:
            file.write(response.text)
        print(f"robots.txt from {url} downloaded and saved successfully.")
    else:
        print(f"Failed to download robots.txt from {url}.")

# Example usage
websites = {
    "Wikipedia": "https://en.wikipedia.org",
    "Twitter": "https://twitter.com",
    # Add more websites here
}

for name, url in websites.items():
    save_file_path = f"{name.lower()}_robots.txt"
    download_robots_txt(url, save_file_path)





#Task 2

#Load data

#Download all comments from a subreddit of your choice using URL: https://api.pushshift.io/reddit/comment/search/ . 

#As a result, store all comments in chronological order in JSON and dump it to a file.

import requests
import json

def download_subreddit_comments(subreddit, save_file_path):
    url = f"https://api.pushshift.io/reddit/comment/search/?subreddit={subreddit}&size=500"
    comments = []
    
    while True:
        response = requests.get(url)
        data = response.json()
        
        if 'data' not in data:
            break
        
        comments.extend(data['data'])
        if len(data['data']) < 500:
            break
        
        # Set the next page URL to fetch the next batch of comments
        url = f"{url}&before={data['data'][-1]['created_utc']}"
    
    # Save the comments to a JSON file
    with open(save_file_path, 'w') as file:
        json.dump(comments, file)
    
    print(f"Downloaded {len(comments)} comments and saved to {save_file_path}.")

# Example usage
subreddit_name = "AskReddit"
save_file_path = "comments.json"

download_subreddit_comments(subreddit_name, save_file_path)

#In the above code, we define a function download_subreddit_comments that takes the subreddit name and the save file path as parameters. It uses a while loop to fetch comments in batches of 500 from the Pushshift API until there are no more comments to fetch.

#The comments are stored in the comments list, and once all comments are fetched, they are saved to the specified JSON file using the json.dump() function.

#You can replace subreddit_name with the desired subreddit you want to download comments from and save_file_path with the path and filename where you want to save the JSON file.
 

#Task 3

#The Weather app

#Write a console application which takes as an input a city name and returns current weather in the format of your choice. For the current task, you can choose any weather API or website or use openweathermap.org 

import requests
import json

def get_current_weather(api_key, city):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}"
    
    response = requests.get(url)
    data = response.json()
    
    if response.status_code == 200:
        weather_description = data['weather'][0]['description']
        temperature = data['main']['temp']
        humidity = data['main']['humidity']
        
        print(f"Weather in {city}:")
        print(f"Description: {weather_description}")
        print(f"Temperature: {temperature} K")
        print(f"Humidity: {humidity}%")
    else:
        print("Failed to retrieve weather data.")

# Example usage
api_key = "YOUR_API_KEY"  # Replace with your OpenWeatherMap API key
city_name = input("Enter a city name: ")

get_current_weather(api_key, city_name)


#To use this code, you will need to sign up for an API key on the OpenWeatherMap website (https://openweathermap.org/). Once you have obtained the API key, replace "YOUR_API_KEY" in the code with your actual API key.

#When you run the code, it will prompt you to enter a city name. After entering the city name, it will make a request to the OpenWeatherMap API to fetch the current weather data for that city. The weather description, temperature, and humidity will then be displayed on the console.

#Please note that the temperature is provided in Kelvin (K). You can modify the code to convert it to Celsius or Fahrenheit if needed.

